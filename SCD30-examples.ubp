module main
author unknown
version 1 0 
description ''

script 40 40 {
comment 'Examples for using the "SCD30" library.
Shows how to use the interfaces for the 
environmental sensor SCD30 from Sensirion.
See https://www.sensirion.com/en/environmental-sensors/carbon-dioxide-sensors/carbon-dioxide-sensors-scd30/'
}

script 158 131 {
comment 'Get the measuring started.
Play with the "isReady" and "read measurement" blocks.
(just click them). What happens when you "speed read"?'
'SCD30 set measurement interval' 2
'SCD30 start measuring'
}

script 350 222 {
'SCD30 read measurement'
sayIt co2
}

script 480 252 (v humidity)

script 204 254 ('SCD30 isReady?')

script 575 261 (v temperature)

script 79 298 {
comment 'Basic example showing values each 2nd second
with deactivated (=0) pressure compensation.'
'SCD30 start measuring with ambient pressure' 0
'SCD30 set measurement interval' 2
forever {
  'SCD30 display next measurement'
}
}

script 148 443 {
comment 'Basic example showing values each three seconds
with activated (!=0) pressure compensation.
Notice the small difference to CO2 concentration
when compared with above.
Play with the ambient pressure value.'
'SCD30 start measuring with ambient pressure' 1007
'SCD30 set measurement interval' 3
forever {
  'SCD30 display next measurement'
}
}

script 77 642 {
comment 'Basic example showing values each 2nd second
with deactivated (=0) pressure compensation
but with another height above sea level.
Play with the compensation value -- luckily we do not
have this CO2 level on Mount Everest -- yet...'
'SCD30 start measuring with ambient pressure' 0
'SCD30 set altitude compensation' 8849
'SCD30 set measurement interval' 2
forever {
  'SCD30 display next measurement'
}
}

script 152 852 {
comment 'Here we set a temperature offset, useful as the 
SDC30 produces heat itself, especially when boxed.
1 tick equals 1/100°C.

Here we pretend to have another 20°C on top which we would need to compensate for.
Watch the values sinking, but do not forget to put it back to something more reasonable
like 0°C-2°C (0-200) afterwards.'
'SCD30 set temperature offset' 2000
waitMillis 300
'SCD30 stop measuring'
'SCD30 set altitude compensation' 500
'SCD30 start measuring'
'SCD30 set measurement interval' 2
forever {
  'SCD30 display next measurement'
}
}

script 452 1026 {
'SCD30 set temperature offset' 200
}

script 142 1308 {
comment 'Fast calibration goes like this:

Take your SCD30 to fresh air or some known CO2 concentration.
The default outside CO2 concentration is 400 ppm hence we use 
this as the default value for "ppm".
Look up the current ambient air pressure in mbar -- 
if no value is given it defaults to 1013 mbar. 

Start this script with these parameters and let it work for at least 2 minutes.
Afterwards this script will force the SCD30 to accomodate 
its CO2 persistent calibration curve accordingly.

The script will continue to run afterwards and should then
show values close to the given ppm.'
'SCD30 set measurement interval' 2
'SCD30 start measuring with ambient pressure' 1013
resetTimer
repeatUntil ((timer) > 120000) {
  waitUntil ('SCD30 isReady?')
  'SCD30 read measurement'
  sayIt 'CO2:' co2 '; seconds remaining before forced calibration:' (120 - ((timer) / 1000))
}
'SCD30 set forced recalibration value' 400
sayIt 'Recalibrated to' ('SCD30 forced recalibration value')
forever {
  waitUntil ('SCD30 isReady?')
  'SCD30 read measurement'
  sayIt 'CO2:' co2
}
}

script 115 1960 {
comment 'Long term calibration -- now you are getting serious!

The Sensirion manual for the SCD30 says:
"When activated for the first time a period of minimum 7 days 
is needed so that the algorithm can find its initial parameter 
set for ASC. 
The sensor has to be exposed to fresh air for at least 1 hour every day.
 Also during that period, the sensor may not be disconnected 
from the power supply, otherwise the procedure to find calibration parameters is aborted 
and has to be restarted from the beginning."'
'SCD30 start calibrating'
}

script 516 2141 {
'SCD30 stop calibrating'
}

script 330 2160 ('SCD30 is calibrating?')

script 112 2206 {
comment 'Print the version of the firmware.
Nothing fancy but good as smoke test.
Mine delivers the value 834'
sayIt ('SCD30 firmware')
}

script 110 2324 {
comment 'Forces the sensor into the same state as after powering up 
without the need for removing the power-supply.'
'SCD30 soft reset'
}


module SCD30
author 'Markus Gälli'
version 1 0 
description 'Implements the interface of the SCD30 environmental sensor 
in MicroBlocks according to its spec in
https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/9.5_CO2/Sensirion_CO2_Sensors_SCD30_Interface_Description.pdf

Allows the user to measure
- CO2 in ppm
- temperature in °C
- humidity in %.

To get started execute the "SCD30 read loop" block.
It starts the continous measurement,
waits until the SCD30 could provide a new measurement,
reads the values into the respective global variables,
and displays them.

To calibrate your scd30 quickly (in 2 minutes)
use the "SCD30 calibrate CO2 to..." block --
read its comment to get you started.

Credits to José García Yeste, the implementation of 
the "SDC30 generate CRC" block is taken from his microblocks SGP30 library.

Note that converting float32 to integer 
only returns the floor of the decimal at the moment.
Hence we return e.g. 20°C instead of 20.8°C.
CO2 ppm is in integers anyway, 
humidity might be up to 0.5% off,
if you needed more concise temperatures
you could use the temperature offset block
and add 0.5°C.'
variables temperature humidity co2 

	spec ' ' 'SCD30 read loop' 'SCD30 read loop'
	spec ' ' 'SCD30 display next measurement' 'SCD30 display next measurement'
	spec ' ' 'SCD30 calibrate' 'SCD30 calibrate CO2 to _ ppm with air pressure _ spec' 'num num' 400 1013
	spec 'r' 'SCD30 generate CRC' 'SCD30 generate CRC _' 'num'
	spec 'r' 'SCD30 check CRC' 'SCD30 check CRC _' 'auto'
	spec ' ' 'SCD30 send' 'SCD30 send command _ parameter _' 'num num'
	spec 'r' 'SCD30 read uint32' 'SCD30 read uint32 _' 'num'
	spec 'r' 'SCD30 float32 to integer' 'SCD30 float32 to integer _ _ _ _' 'num num num num'
	spec ' ' 'SCD30 start measuring with ambient pressure' 'SCD30 start measuring with ambient pressure _' 'num'
	spec ' ' 'SCD30 start measuring' 'SCD30 start measuring'
	spec ' ' 'SCD30 stop measuring' 'SCD30 stop measuring'
	spec ' ' 'SCD30 set measurement interval' 'SCD30 measure every _ seconds' 'num' 2
	spec 'r' 'SCD30 measurement interval' 'SCD30 measurement interval'
	spec 'r' 'SCD30 isReady?' 'SCD30 isReady?'
	spec ' ' 'SCD30 read measurement' 'SCD30 read measurement'
	spec ' ' 'SCD30 start calibrating' 'SCD30 start calibrating'
	spec 'r' 'SCD30 is calibrating?' 'SCD30 is calibrating?'
	spec ' ' 'SCD30 stop calibrating' 'SCD30 stop calibrating'
	spec ' ' 'SCD30 set forced recalibration value' 'SCD30 set forced recalibration value _' 'num' 400
	spec 'r' 'SCD30 forced recalibration value' 'SCD30 forced recalibration value'
	spec ' ' 'SCD30 set temperature offset' 'SCD30 set temperature offset _' 'num' 200
	spec 'r' 'SCD30 temperature offset' 'SCD30 temperature offset'
	spec ' ' 'SCD30 set altitude compensation' 'SCD30 set altitude compensation _' 'num'
	spec 'r' 'SCD30 altitude compensation' 'SCD30 altitude compensation'
	spec 'r' 'SCD30 firmware' 'SCD30 firmware'
	spec ' ' 'SCD30 soft reset' 'SCD30 soft reset'

to 'SCD30 altitude compensation' {
  return ('SCD30 read uint32' (hexToInt '5102'))
}

to 'SCD30 calibrate' ppm mbar {
  comment 'Take your SCD30 to fresh air or some known CO2 concentration.
The default outside CO2 concentration is 400 ppm hence we use 
this as the default value for "ppm".
Look up the current ambient air pressure in mbar -- 
if no value is given it defaults to 1013 mbar. 

Start this script with these parameters and let it work for at least 2 minutes.
Afterwards this script will force the SCD30 to accomodate 
its CO2 persistent calibration curve accordingly.

The script will continue to run afterwards and should then
show values close to the given ppm.
'
  'SCD30 set measurement interval' 2
  'SCD30 start measuring with ambient pressure' mbar
  resetTimer
  repeatUntil ((timer) > 120000) {
    waitUntil ('SCD30 isReady?')
    'SCD30 read measurement'
    sayIt 'CO2:' co2 '; seconds remaining before forced calibration:' (120 - ((timer) / 1000))
  }
  'SCD30 set forced recalibration value' ppm
  sayIt 'Recalibrated to' ('SCD30 forced recalibration value')
  forever {
    waitUntil ('SCD30 isReady?')
    'SCD30 read measurement'
    sayIt 'CO2:' co2
  }
}

to 'SCD30 check CRC' list {
  waitMillis 500
  if (or ((size list) == 0) (((size list) % 3) != 0)) {
    return (booleanConstant false)
  }
  local 'blocks' ((size list) / 3)
  for i blocks {
    local 'toCheck' (((at (((i - 1) * 3) + 1) list) << 8) | (at (((i - 1) * 3) + 2) list))
    local 'result' ('SCD30 generate CRC' toCheck)
    if (result != (at (((i - 1) * 3) + 3) list)) {
      return (booleanConstant false)
    }
  }
  return (booleanConstant true)
}

to 'SCD30 display next measurement' {
  waitUntil ('SCD30 isReady?')
  'SCD30 read measurement'
  sayIt ('[data:join]' 'CO2:' co2 'ppm, temperature:' temperature '°C, humidity:' humidity '%')
}

to 'SCD30 firmware' {
  return ('SCD30 read uint32' (hexToInt 'D100'))
}

to 'SCD30 float32 to integer' byte1 byte2 byte3 byte4 {
  comment 'Only yields the floor of the decimal at the moment, i.e. no values after the ".".
  See library description for workarounds.'
  local 'exponent' 0
  local 'significand' 0
  local 'byte2_mod' 0
  local 'floor' 0
  exponent = (((byte1 << 1) | (byte2 >> 7)) - 127)
  byte2_mod = ((1 << 7) | byte2)
  significand = ((byte2_mod << 16) | ((byte3 << 8) | byte4))
  floor = (significand >> (23 - exponent))
  if ((byte1 >> 7) != 0) {
    floor = (0 - floor)
  }
  return floor
}

to 'SCD30 forced recalibration value' {
  return ('SCD30 read uint32' (hexToInt '5204'))
}

to 'SCD30 generate CRC' uint16 {
  comment 'Credits to José García Yeste, the implementation 
  of this block is taken from his microblocks sgp30 library'
  local 'buf' ('[data:makeList]' (uint16 >> 8) (uint16 & 255))
  local 'crc' (hexToInt 'FF')
  for i (size buf) {
    crc = (crc ^ (at i buf))
    for i 8 {
      if ((crc & (hexToInt '80')) != 0) {
        crc = ((crc << 1) ^ (hexToInt '31'))
      } else {
        crc = (crc << 1)
      }
    }
  }
  return (crc & 255)
}

to 'SCD30 is calibrating?' {
  return (('SCD30 read uint32' (hexToInt '5306')) == 1)
}

to 'SCD30 isReady?' {
  return (('SCD30 read uint32' (hexToInt '0202')) == 1)
}

to 'SCD30 measurement interval' {
  return ('SCD30 read uint32' (hexToInt '4600'))
}

to 'SCD30 read loop' {
  comment 'Basic example showing values each 2nd second
with deactivated (=0) pressure compensation.'
  'SCD30 start measuring with ambient pressure' 0
  'SCD30 set measurement interval' 2
  forever {
    'SCD30 display next measurement'
  }
}

to 'SCD30 read measurement' {
  comment 'When new measurement data is available it can be read out with this command. 
Note that the read header should be send with a delay of > 3ms following the write sequence.
Make sure that the measurement is completed by reading the data ready status bit before read out.'
  local 'all' (newList 18)
  local 'command' (hexToInt '0300')
  local 'cmd' ('[data:makeList]' (command >> 8) (command & (hexToInt 'FF')))
  '[sensors:i2cWrite]' (hexToInt '61') cmd
  waitMillis 3
  '[sensors:i2cRead]' (hexToInt '61') all
  if ('SCD30 check CRC' all) {
    co2 = ('SCD30 float32 to integer' (at 1 all) (at 2 all) (at 4 all) (at 5 all))
    temperature = ('SCD30 float32 to integer' (at 7 all) (at 8 all) (at 10 all) (at 11 all))
    humidity = ('SCD30 float32 to integer' (at 13 all) (at 14 all) (at 16 all) (at 17 all))
  }
}

to 'SCD30 read uint32' command {
  'SCD30 send' command ''
  waitMillis 3
  local 'response' (newList 2)
  '[sensors:i2cRead]' (hexToInt '61') response
  local 'singleResponse' (((at 1 response) << 8) | (at 2 response))
  return singleResponse
}

to 'SCD30 send' command parameter {
  local 'cmdList' ('[data:makeList]' (command >> 8) (command & (hexToInt 'FF')))
  if (parameter != '') {
    '[data:addLast]' (parameter >> 8) cmdList
    '[data:addLast]' (parameter & (hexToInt 'FF')) cmdList
    '[data:addLast]' ('SCD30 generate CRC' parameter) cmdList
  }
  '[sensors:i2cWrite]' (hexToInt '61') cmdList
}

to 'SCD30 set altitude compensation' 'current altitude in meter' {
  comment 'Setting altitude is disregarded when an ambient pressure is given to the sensor
via "SCD30 start measuring with ambient pressure"'
  'SCD30 send' (hexToInt '5102') (v 'current altitude in meter')
}

to 'SCD30 set forced recalibration value' ppm {
  'SCD30 send' (hexToInt '5204') ppm
}

to 'SCD30 set measurement interval' second {
  'SCD30 send' (hexToInt '4600') second
}

to 'SCD30 set temperature offset' tick {
  comment 'The on-board RH/T sensor is influenced by thermal self-heating 
of SCD30 and other electrical components. 
Design-in alters the thermal properties of SCD30 such that temperature 
and humidity offsets may occur when operating the sensor in end-customer devices. 
Compensation of those effects is achievable by writing the temperature offset found 
in continuous operation of the device into the sensor.
Temperature offset value is saved in non-volatile memory.
 The last set value will be used for temperature offset compensation after repowering.

Format: uint16 Temperature offset, unit [°C x 100], i.e. one tick corresponds to 0.01°C'
  'SCD30 send' (hexToInt '5403') tick
}

to 'SCD30 soft reset' {
  'SCD30 send' (hexToInt '3D04') ''
}

to 'SCD30 start calibrating' {
  'SCD30 send' (hexToInt '5306') 1
}

to 'SCD30 start measuring' {
  comment 'argument = 0 deactivates pressure compensation.'
  'SCD30 start measuring with ambient pressure' 0
}

to 'SCD30 start measuring with ambient pressure' mbar {
  'SCD30 send' (hexToInt '0010') mbar
}

to 'SCD30 stop calibrating' {
  'SCD30 send' (hexToInt '5306') 0
}

to 'SCD30 stop measuring' {
  'SCD30 send' (hexToInt '0104') ''
}

to 'SCD30 temperature offset' {
  return ('SCD30 read uint32' (hexToInt '5403'))
}

