module scd30
author 'Markus Gälli'
version 1 0 
description 'Implements the interface of the SCD30 environmental sensor 
in MicroBlocks according to its spec in
https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/9.5_CO2/Sensirion_CO2_Sensors_SCD30_Interface_Description.pdf

Allows the user to measure
- CO2 in ppm
- temperature in °C
- humidity in %.

To get started execute the "SCD30 read loop" block.
It starts the continous measurement, 
waits until the SCD30 could provide a new measurement,
reads the values into the respective global variables,
and displays them.

To calibrate your scd30 quickly (in 2 minutes)
use the "SCD30 calibrate CO2 to..." block --
read its comment to get you started.

The measurement interval can be set in seconds >=2s.

if yes it can read all values into the respective variables provided (CO2, temperature, humidity).

The device can be triggered to calibrate its CO2 measurement.
The CO2 measurement can be adjusted by ambient air pressure or altitude.
The temperature measurement can be adjusted by a temperature offset as the device creates its own heat.

Credits to José García Yeste, the implementation of 
the "SDC30 generate CRC" block is taken from his microblocks sgp30 library'
variables temperature humidity co2 

	spec ' ' 'SCD30 read loop' 'SCD30 read loop'
	spec ' ' 'SCD30 calibrate in fresh air' 'SCD30 calibrate CO2 to _ ppm with ambient air pressure _ 
	spec ' ' 'SCD30 send' 'SCD30 send _ with _' 'auto auto' '' ''
	spec 'r' 'SCD30 read' 'SCD30 send _ read _' 'auto auto' '10' 10
	spec 'r' 'SGC30 generate CRC' 'generate CRC _' 'auto' 1
	spec 'r' 'SCD30 to decimal' 'SCD30 to decimal _ _ _ _' 'auto auto auto auto' 10 '10' '10' '10'
	spec ' ' 'SCD30 start measuring with ambient pressure' 'SCD30 start measuring with ambient pressure _' 'auto' ''
	spec ' ' 'SCD30 start measuring' 'SCD30 start measuring'
	spec ' ' 'SCD30 stop measuring' 'SCD30 stop measuring'
	spec ' ' 'SCD30 set measurement interval' 'SCD30 measure each _ second' 'auto' '10'
	spec 'r' 'SCD30 measurement interval' 'SCD30 measurement interval'
	spec 'r' 'SCD30 isReady?' 'SCD30 isReady?'
	spec 'r' 'SCD30 check CRC' 'SCD30 check CRC _' 'auto' '10'
	spec ' ' 'SCD30 read measurement' 'SCD30 read measurement'
	spec ' ' 'SCD30 start calibrating' 'SCD30 start calibrating'
	spec 'r' 'SCD30 is calibrating?' 'SCD30 is calibrating?'
	spec ' ' 'SCD30 stop calibrating' 'SCD30 stop calibrating'
	spec ' ' 'SCD30 set forced recalibration value' 'SCD30 set forced recalibration value _' 'auto' '10'
	spec 'r' 'SCD30 forced recalibration value' 'SCD30 forced recalibration value'
	spec ' ' 'SCD30 set temperature offset' 'SCD30 set temperature offset _' 'auto' '10'
	spec 'r' 'SCD30 temperature offset' 'SCD30 temperature offset'
	spec ' ' 'SCD30 set altitude compensation' 'SCD30 set altitude compensation _' 'auto' '10'
	spec 'r' 'SCD30 altitude compensation' 'SCD30 altitude compensation'
	spec 'r' 'SCD30 firmware' 'SCD30 firmware'
	spec ' ' 'SCD30 soft reset' 'SCD30 soft reset'
	mbar' 'auto auto' 400 1013

to 'SCD30 read loop' {
  'SCD30 start measuring with ambient pressure'
  'SCD30 set measurement interval' 2
  forever {
    waitUntil ('SCD30 isReady?')
    'SCD30 read measurement'
    sayIt ('[data:join]' 'CO2:' co2 'ppm, temperature:' temperature '°C, humidity:' humidity '%')
  }
}

to 'SCD30 calibrate in fresh air' ppm mbar {
  comment 'Take your SCD30 to fresh air or some known CO2 concentration.
The default outside CO2 concentration is 400 ppm hence we use 
this as the default value for "ppm".
Look up the current ambient air pressure in mbar -- 
if no value is given it defaults to 1013 mbar. 

Start this script with these parameters and let it work for at least 2 minutes.
Afterwards this script will force the SCD30 to accomodate 
its CO2 persistent calibration curve accordingly.

The script will continue to run afterwards and should then
show values close to the given ppm.
'
  'SCD30 set measurement interval' 2
  'SCD30 start measuring with ambient pressure' mbar
  resetTimer
  repeatUntil ((timer) > 120000) {
    waitUntil ('SCD30 isReady?')
    'SCD30 read measurement'
    sayIt 'CO2:' co2 '; seconds remaining before forced calibration:' (120 - ((timer) / 1000))
  }
  'SCD30 set forced recalibration value' ppm
  sayIt 'Recalibrated to' ('SCD30 forced recalibration value')
  forever {
    waitUntil ('SCD30 isReady?')
    'SCD30 read measurement'
    sayIt 'CO2:' co2
  }
}

to 'SCD30 send' command parameter {
  local 'cmdList' ('[data:makeList]' (command >> 8) (command & (hexToInt 'FF')))
  if (parameter != '') {
    '[data:addLast]' (parameter >> 8) cmdList
    '[data:addLast]' (parameter & (hexToInt 'FF')) cmdList
    '[data:addLast]' ('SGC30 generate CRC' parameter) cmdList
  }
  '[sensors:i2cWrite]' (hexToInt '61') cmdList
}

to 'SCD30 read' command size {
  'SCD30 send' command ''
  waitMillis 3
  local 'response' (newList size)
  '[sensors:i2cRead]' (hexToInt '61') response
  local 'singleResponse' (((at 1 response) << 8) | (at 2 response))
  return singleResponse
}

to 'SGC30 generate CRC' value {
  comment 'Credits to José García Yeste, the implementation 
  of this block is taken from his microblocks sgp30 library'
  local 'buf' ('[data:makeList]' (value >> 8) (value & 255))
  local 'crc' (hexToInt 'FF')
  for i (size buf) {
    crc = (crc ^ (at i buf))
    for i 8 {
      if ((crc & (hexToInt '80')) != 0) {
        crc = ((crc << 1) ^ (hexToInt '31'))
      } else {
        crc = (crc << 1)
      }
    }
  }
  return (crc & 255)
}

to 'SCD30 to decimal' byte1 byte2 byte3 byte4 {
  comment 'Only yields the floor of the decimal at the moment, i.e. no values after the "."'
  local 'exponent' 0
  local 'significand' 0
  local 'byte2_mod' 0
  local 'floor' 0
  exponent = (((byte1 << 1) | (byte2 >> 7)) - 127)
  byte2_mod = ((1 << 7) | byte2)
  significand = ((byte2_mod << 16) | ((byte3 << 8) | byte4))
  floor = (significand >> (23 - exponent))
  if ((byte1 >> 7) != 0) {
    floor = (0 - floor)
  }
  return floor
}

to 'SCD30 start measuring with ambient pressure' mbar {
  'SCD30 send' (hexToInt '0010') mbar
}

to 'SCD30 start measuring' {
  comment 'argument = 0 deactivates pressure compensation.'
  'SCD30 start measuring with ambient pressure' 0
}

to 'SCD30 stop measuring' {
  'SCD30 send' (hexToInt '0104') ''
}

to 'SCD30 set measurement interval' second {
  'SCD30 send' (hexToInt '4600') second
}

to 'SCD30 measurement interval' {
  return ('SCD30 read' (hexToInt '4600') 2)
}

to 'SCD30 isReady?' {
  return (('SCD30 read' (hexToInt '0202') 2) == 1)
}

to 'SCD30 check CRC' list {
  waitMillis 500
  if (or ((size list) == 0) (((size list) % 3) != 0)) {
    return (booleanConstant false)
  }
  local 'blocks' ((size list) / 3)
  for i blocks {
    local 'toCheck' (((at (((i - 1) * 3) + 1) list) << 8) | (at (((i - 1) * 3) + 2) list))
    local 'result' ('SGC30 generate CRC' toCheck)
    if (result != (at (((i - 1) * 3) + 3) list)) {
      return (booleanConstant false)
    }
  }
  return (booleanConstant true)
}

to 'SCD30 read measurement' {
  comment 'When new measurement data is available it can be read out with this command. 
Note that the read header should be send with a delay of > 3ms following the write sequence.
Make sure that the measurement is completed by reading the data ready status bit before read out.'
  local 'all' (newList 18)
  local 'command' (hexToInt '0300')
  local 'cmd' ('[data:makeList]' (command >> 8) (command & (hexToInt 'FF')))
  '[sensors:i2cWrite]' (hexToInt '61') cmd
  waitMillis 3
  '[sensors:i2cRead]' (hexToInt '61') all
  if ('SCD30 check CRC' all) {
    local 'temp' 0
    co2 = ('SCD30 to decimal' (at 1 all) (at 2 all) (at 4 all) (at 5 all))
    temperature = ('SCD30 to decimal' (at 7 all) (at 8 all) (at 10 all) (at 11 all))
    humidity = ('SCD30 to decimal' (at 13 all) (at 14 all) (at 16 all) (at 17 all))
  }
}

to 'SCD30 start calibrating' {
  'SCD30 send' (hexToInt '5306') 1
}

to 'SCD30 is calibrating?' {
  return (('SCD30 read' (hexToInt '5306') 2) == 1)
}

to 'SCD30 stop calibrating' {
  'SCD30 send' (hexToInt '5306') 0
}

to 'SCD30 set forced recalibration value' ppm {
  'SCD30 send' (hexToInt '5204') ppm
}

to 'SCD30 forced recalibration value' {
  return ('SCD30 read' (hexToInt '5204') 2)
}

to 'SCD30 set temperature offset' tick {
  comment 'The on-board RH/T sensor is influenced by thermal self-heating 
of SCD30 and other electrical components. 
Design-in alters the thermal properties of SCD30 such that temperature 
and humidity offsets may occur when operating the sensor in end-customer devices. 
Compensation of those effects is achievable by writing the temperature offset found 
in continuous operation of the device into the sensor.
Temperature offset value is saved in non-volatile memory.
 The last set value will be used for temperature offset compensation after repowering.

Format: uint16 Temperature offset, unit [°C x 100], i.e. one tick corresponds to 0.01°C'
  'SCD30 send' (hexToInt '5403') tick
}

to 'SCD30 temperature offset' {
  return ('SCD30 read' (hexToInt '5403') 2)
}

to 'SCD30 set altitude compensation' 'current altitude in meter' {
  comment 'Setting altitude is disregarded when an ambient pressure is given to the sensor
via "SCD30 start measuring with ambient pressure"'
  'SCD30 send' (hexToInt '5102') (v 'current altitude in meter')
}

to 'SCD30 altitude compensation' {
  return ('SCD30 read' (hexToInt '5102') 2)
}

to 'SCD30 firmware' {
  return ('SCD30 read' (hexToInt 'D100') 2)
}

to 'SCD30 soft reset' {
  'SCD30 send' (hexToInt '3D04') ''
}

